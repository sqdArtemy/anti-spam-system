name: ${COMPOSE_PROJECT_NAME}

services:
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    image: postgres:${POSTGRES_VERSION}
    networks:
      - anti-spam-network
    ports:
      - 5432:5432
    volumes:
      - /var/lib/postgresql/data
  minio:
    hostname: minio
    container_name: minio
    image: minio/minio:${MINIO_VERSION}
    restart: always
    ports:
      - 9001:9001
      - 9000:9000
    networks:
      - anti-spam-network
    volumes:
      - minio_volume:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgresql
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
      - anti-spam-network
    ports:
      - 7233:7233
    volumes:
      - temporal_volume:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_ADMINTOOLS_VERSION}
    networks:
      - anti-spam-network
    stdin_open: true
    tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - anti-spam-network
    ports:
      - 8080:8080
  worker-app:
    container_name: worker-app
    build:
      context: ../model
      dockerfile: Dockerfile
    environment:
      - TEMPORAL_URL=${TEMPORAL_URL}
      - TASK_QUEUE=${TASK_QUEUE}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_SECURE=${MINIO_SECURE}
    depends_on:
      - temporal
      - minio
    networks:
      - anti-spam-network
  mc:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}); do echo 'waiting for minio'; sleep 2; done;
      /usr/bin/mc mb minio/images;
      /usr/bin/mc policy set public minio/images;
      "
    networks:
      - anti-spam-network


volumes:
  temporal_volume:
    driver: local
  minio_volume:
    driver: local

networks:
  anti-spam-network:
    name: anti-spam-network
    driver: bridge